package romanNumerals;

import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

public class RomanNumeralsTranslator {

	public StringBuilder translateNumToRomanNumeral(Integer num) {
		StringBuilder answer = new StringBuilder();
		Map<Integer, String> numeralsMap = new LinkedHashMap<>();
		numeralsMap.put(10, "X");
		numeralsMap.put(9, "IX");
		numeralsMap.put(5, "V");
		numeralsMap.put(4, "IV");
		numeralsMap.put(3, "III");
		numeralsMap.put(2, "II");
		numeralsMap.put(1, "I");

		Set<Integer> numeralsKeys = numeralsMap.keySet();
		Iterator<Integer> it = numeralsKeys.iterator();
		Integer remainingNum = num;

		while (it.hasNext()) {
			System.out.println("In while");
			Integer nextKey = it.next();
			System.out.println(nextKey);
//			do {
//				if (nextKey == remainingNum) {
//					answer.append(numeralsMap.get(nextKey));
//					remainingNum -= nextKey;
//					System.out.println("in else");
//					System.out.println(remainingNum);
//				}
//				else {
//					remainingNum = remainingNum % nextKey;
//					answer.append(numeralsMap.get(nextKey));
//					System.out.println("in else");
//					System.out.println(remainingNum);
//					
//				}
//			} while (remainingNum > 0);
		}
		return answer;
	}

}
